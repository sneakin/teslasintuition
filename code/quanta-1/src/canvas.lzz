#hdr
#include "renderer.h"
#include "vertex_shader.h"
#include "fragment_shader.h"
#include "shader_program.h"
#include "renderer/uniform_matrix_stack.h"
#include "renderer/material.h"

class SquareMesh;
class LineMesh;
#end

#src
#include "renderer/square_mesh.h"
#include "renderer/line_mesh.h"
#end

class StockShaderProgram: public ShaderProgram
{
  VertexShader _vertex;
  FragmentShader _fragment;
  
public:
  StockShaderProgram(Renderer &renderer, const char *vertex_shader, const char *fragment_shader)
    : ShaderProgram(renderer),
      _vertex(vertex_shader),
      _fragment(fragment_shader)
  {
    attach(_vertex);
    attach(_fragment);
    bind_data(0, "outColor");
    bind_data(1, "outVelocity");
    bind_data(2, "outBloom");
    bind_data(3, "outDepth");
    relink();
  }
};

class Canvas
{
  Renderer &_renderer;
  UniformMatrixStack _modelview, _projection, _texture, _color;
  GLuint _shader_sampler_velocity, _shader_uniform_fragment_id;
  GLuint _fragment;
  GLuint _shader_uniform_color, _shader_uniform_velocity;
  Vec3 _uniform_color, _uniform_velocity;
  SquareMesh *_quad;
  LineMesh *_line;
  
public:
  Canvas(Renderer &renderer)
    : _renderer(renderer), _fragment(0), _uniform_color(Colors::White)
  {
    _quad = new SquareMesh(*this);
    _line = new LineMesh(*this);
  }

  virtual ~Canvas()
  {
    delete _quad;
    delete _line;
  }

  Renderer &renderer() { return _renderer; }

  virtual void bind(ShaderProgram &shader)
  {
    shader.bind();
    updateUniforms(shader);
    updateSamplers(shader);
  }

  void updateUniforms(ShaderProgram &shader)
  {
    _modelview.setLocation(shader.uniformLocation("mModelView"));
    _projection.setLocation(shader.uniformLocation("mProjection"));
    _texture.setLocation(shader.uniformLocation("mTexture"));
    _color.setLocation(shader.uniformLocation("mColor"));

    _shader_uniform_fragment_id = shader.uniformLocation("uFragmentId");
    resetFragmentId();

    _shader_uniform_color = shader.uniformLocation("uColor");
    setColor(_uniform_color);

    _shader_uniform_velocity = shader.uniformLocation("uVelocity");
    setVelocity(_uniform_velocity);
  }

  void updateSamplers(ShaderProgram &shader)
  {
    shader.setUniformi("tex", 0);
    shader.setUniformi("depth", 1);
    shader.setUniformi("velocity", 2);
    shader.setUniformi("bloom", 3);
    shader.setUniformi("fragment_data", 4);
  }

  void setColor(const Vec3 &c)
  {
    _uniform_color = c;
    glUniform4rv(_shader_uniform_color, 1, c);
    ASSERT_GL_ERROR;
  }

  void pushProjectionMatrix()
  {
    _projection.push();
  }

  void popProjectionMatrix()
  {
    _projection.pop();
  }
  
  void setProjectionMatrix(const Matrix &m)
  {
    _projection.load(m);
  }

  void mulProjectionMatrix(const Matrix &m)
  {
    _projection.mul(m);
  }

  const Matrix &modelViewMatrix() const { return _modelview.top(); }
  
  void setModelViewMatrix(const Matrix &m)
  {
    _modelview.load(m);
  }

  void mulModelViewMatrix(const Matrix &m)
  {
    _modelview.mul(m);
  }

  void pushModelViewMatrix()
  {
    _modelview.push();
  }

  void popModelViewMatrix()
  {
    _modelview.pop();
  }

  void setTextureMatrix(const Matrix &m)
  {
    _texture.load(m);
  }

  Matrix colorMatrix() const
  {
    return _color.top();
  }
  
  void setColorMatrix(const Matrix &m)
  {
    _color.load(m);
  }

  void pushColorMatrix()
  {
    _color.push();
  }

  void popColorMatrix()
  {
    _color.pop();
  }

  void mulColorMatrix(const Matrix &m)
  {
    _color.mul(m);
  }

  void setVelocity(const Vec3 &v)
  {
    //glUniform3rv(_shader_uniform_velocity, 1, _modelview.top() * v);
    // TODO: is the W component screwing velocity?
    _uniform_velocity = v;
    glUniform3rv(_shader_uniform_velocity, 1, _modelview.top() * (v * Vec3(1.0, 1.0, 1.0, 0.0)));
    ASSERT_GL_ERROR;
    updateFragmentId();
  }

  void updateFragmentId()
  {
    glUniform1i(_shader_uniform_fragment_id, _fragment++);
    ASSERT_GL_ERROR;
  }

  void resetFragmentId()
  {
    _fragment = 0;
    updateFragmentId();
}

  GLuint positionAttribute() const { return 0; }
  GLuint colorAttribute() const { return 1; }
  GLuint normalAttribute() const { return 2; }
  GLuint textureCoordAttribute() const { return 3; }

  void unbindTexture()
  {
    _renderer.unbindTexture();
  }
    
  void renderSprite(const Texture &tex, const Vec3 &position, const Vec3 &origin, const Vec3 &size, const Real &angle)
  {
    _modelview.push();
    _modelview.mul(Matrix::translation(-origin) * Matrix::scale(size) * Matrix::rotateZ(angle) * Matrix::translation(position));
    tex.bind(0);
    ASSERT_GL_ERROR;
    _quad->bind();
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    ASSERT_GL_ERROR;
    _quad->unbind();
    _modelview.pop();
    tex.unbind();
  }

 void renderCameraAxis(const Camera &camera)
  {
    renderAxis(camera.position(), camera.right(), camera.up());
    pushColorMatrix(); {
      mulColorMatrix(Matrix::rotate(Vec3(M_PI / 4.0, M_PI / 4.0, M_PI / 4.0)));
      renderAxis(camera.position(), Vec3::X, Vec3::Y);
    } popColorMatrix();
  }

  virtual void renderOriginAxis()
  {
    renderVector(Vec3(), Vec3::X, Colors::Red);
    renderVector(Vec3(), Vec3::Y, Colors::Green);
    renderVector(Vec3(), Vec3::Z, Colors::Blue);
  }

  void renderAxis(const Vec3 &origin, const Vec3 &right = Vec3::X, const Vec3 &up = Vec3::Y)
  {
    pushModelViewMatrix(); {
      mulModelViewMatrix(Matrix::lookAt(up.cross(right), up) * Matrix::translation(origin));
      renderOriginAxis();
    } popModelViewMatrix();
  }

  void renderVector(const Vec3 &origin, const Vec3 &v, const Vec3 &color = Colors::White)
  {
    ASSERT_GL_ERROR;
    glLineWidth(4.0);
    glPointSize(10.0);
    ASSERT_GL_ERROR;
    setColor(color);
    pushModelViewMatrix(); {
      mulModelViewMatrix(Matrix::scale(v * Vec3(1.0, 1.0, 1.0, 0.0) + Vec3::W) * Matrix::translation(origin));
      _line->bind();
      glDrawArrays(GL_LINES, 0, 2);
      _line->unbind();
    } popModelViewMatrix();
    ASSERT_GL_ERROR;
  }

  void renderPoint(const Vec3 &position, const Vec3 &color = Colors::White, Real diameter = 1.0)
  {
    ASSERT_GL_ERROR;
    glPointSize(clamp<Real>(diameter, 10.0));
    setColor(color);
    pushModelViewMatrix(); {
      mulModelViewMatrix(Matrix::translation(position));
      _line->bind();
      glDrawArrays(GL_POINTS, 0, 1);
      _line->unbind();
    } popModelViewMatrix();
    ASSERT_GL_ERROR;
  }

  void renderLine(const Vec3 &a, const Vec3 &b, const Vec3 &color = Colors::White)
  {
    renderVector(a, b - a, color);
  }
};

class Canvas2D: public Canvas
{
public:
  Canvas2D(Renderer &renderer)
    : Canvas(renderer)
  {
  }
};

class Canvas3D: public Canvas
{
  GLuint _shader_uniform_forward, _shader_uniform_camera;
  GLuint _shader_uniform_light0_position, _shader_uniform_light0_intensity, _shader_uniform_light0_color, _shader_uniform_ambient_light;
  GLuint _shader_uniform_material_shine, _shader_uniform_material_specular, _shader_uniform_material_diffuse, _shader_uniform_material_ambient, _shader_uniform_material_emission;
  Material _material;
  
public:
  static const Material AxisMaterial = Material(Colors::Clear, Colors::Clear, 0.0, Colors::White, Colors::White);
  
  Canvas3D(Renderer &renderer)
    : Canvas(renderer)
  {
  }

  virtual void bind(ShaderProgram &shader)
  {
    Canvas::bind(shader);

    _shader_uniform_light0_position = shader.uniformLocation("uLight.position");
    _shader_uniform_light0_intensity = shader.uniformLocation("uLight.intensity");
    _shader_uniform_light0_color = shader.uniformLocation("uLight.color");
    _shader_uniform_ambient_light = shader.uniformLocation("uAmbientLight");

    _shader_uniform_forward = shader.uniformLocation("uForward");
    _shader_uniform_camera = shader.uniformLocation("uCamera");

    _shader_uniform_material_shine = shader.uniformLocation("uMaterial.shine");
    _shader_uniform_material_specular = shader.uniformLocation("uMaterial.specular");
    _shader_uniform_material_diffuse = shader.uniformLocation("uMaterial.diffuse");
    _shader_uniform_material_ambient = shader.uniformLocation("uMaterial.ambient");
    _shader_uniform_material_emission = shader.uniformLocation("uMaterial.emission");

    bindMaterial(GL_FRONT_AND_BACK, _material);
  }

  void setCamera(const Camera &camera)
  {
    glUniform3rv(_shader_uniform_forward, 1, camera.forward());
    glUniform3rv(_shader_uniform_camera, 1, camera.position());
    setModelViewMatrix(camera.matrix().invert());
  }
  
  uint32_t createPointLight(const Vec3 &position, Real attenuation, const Vec3 &color)
  {
    moveLight(0, position);
    glUniform1r(_shader_uniform_light0_intensity, attenuation);
    ASSERT_GL_ERROR;
    glUniform3rv(_shader_uniform_light0_color, 1, color);
    ASSERT_GL_ERROR;
    return 0;
  }

  void setAmbientLight(const Vec3 &color)
  {
    glUniform3rv(_shader_uniform_ambient_light, 1, color);
    ASSERT_GL_ERROR;
  }

  void moveLight(uint32_t id, const Vec3 &position)
  {
    glUniform4rv(_shader_uniform_light0_position, 1, modelViewMatrix() * position);
    ASSERT_GL_ERROR;
  }

  void bindMaterial(GLenum face, const Material &m)
  {
    if(face == GL_FRONT_AND_BACK) {
      bindMaterial(GL_FRONT, m);
      bindMaterial(GL_BACK, m);
    } else {
      _material = m; // TODO detect if useProgram was called
      glUniform1r(_shader_uniform_material_shine, m.shininess());
      glUniform4rv(_shader_uniform_material_specular, 1, m.specular());
      glUniform4rv(_shader_uniform_material_emission, 1, m.emission());
      glUniform4rv(_shader_uniform_material_ambient, 1, m.ambient());
      glUniform4rv(_shader_uniform_material_diffuse, 1, m.diffuse());
    }

    ASSERT_GL_ERROR;
  }

  void unbindMaterial(GLenum face)
  {
    bindMaterial(face, Material::Default);
  }

  virtual void renderOriginAxis()
  {
    bindMaterial(GL_FRONT_AND_BACK, AxisMaterial);
    Canvas::renderOriginAxis();
    unbindMaterial(GL_FRONT_AND_BACK);
  }
};
