#hdr
#include <unistd.h>
#include <string>
#end

#src
#include <iostream>
#include <SDL2/SDL.h>
#include "gl.h"
#end

class ScreenShooter
{
  int _window_width, _window_height, _bpp, _shots;
  unsigned char *_buffer;
  pid_t _pid;

  enum Mode
  {
    OFF,
    SINGLE,
    MOVIE,
    UNKNOWN
  };

  Mode _mode;

public:
  class Error
  {
    public:
      const ScreenShooter &shooter;

      Error(const ScreenShooter &s)
        : shooter(s)
      {
      }
  };

  ScreenShooter(int w, int h)
    : _buffer(NULL), _bpp(4), _shots(0), _mode(OFF)
  {
    _pid = getpid();
    setWindowSize(w, h);
  }

  ~ScreenShooter()
  {
    if(_buffer != NULL) delete[] _buffer;
  }

  void setWindowSize(int w, int h)
  {
    _window_width = w;
    _window_height = h;
    if(_buffer != NULL) {
      delete[] _buffer;
    }
    _buffer = new unsigned char[_bpp * w * h];
  }

  void prepForShot()
  {
    _mode = SINGLE;
  }

  void prepForMovie()
  {
    _mode = MOVIE;
  }

  void toggleMovie()
  {
    if(_mode == MOVIE) {
      _mode = OFF;
    } else {
      _mode = MOVIE;
    }
  }

  void takeScreenShot()
  {
    switch(_mode) {
      case SINGLE:
        _mode = OFF;
        // move to next case
      case MOVIE:
        doScreenShot();
      default:
        break;
    }
  }

private:
  void doScreenShot()
  {
    // read the pixels to a buffer
    glReadPixels(0, 0, _window_width, _window_height, GL_RGBA, GL_UNSIGNED_BYTE, _buffer);
    ASSERT_GL_ERROR;
    mirrorBuffer();

    // convert the buffer to an image format
    SDL_Surface *surf = SDL_CreateRGBSurfaceFrom(_buffer, _window_width, _window_height, _bpp*8, _window_width * _bpp, 0xFF, 0xFF00, 0xFF0000, 0xFF000000);
    if(surf == NULL) {
      throw Error(*this);
    }

    auto path = nextShotPath();
    if(SDL_SaveBMP(surf, path.c_str()) == 0) {
      std::cerr << "Screenshot " << path << " saved." << std::endl;
    } else {
      std::cerr << "Error saving screenshot " << path << std::endl;
      throw Error(*this);
    }

    SDL_FreeSurface(surf);

    _shots++;
  }

  void mirrorBuffer()
  {
    const int pitch = _window_width * _bpp;
    unsigned char _line[pitch];

    for(int y = 0; y < _window_height / 2; y++ ) {
      unsigned char *top = &_buffer[y * pitch], *bottom = &_buffer[(_window_height - y) * pitch];
      memcpy(_line, top, pitch);
      memcpy(top, bottom, pitch);
      memcpy(bottom, _line, pitch);
    }
  }

  std::string nextShotPath()
  {
    // compute a path to save a single shot $PWD/quanta-$PID-$FRAME.(png|bmp)
    return std::string("quanta-" + std::to_string((unsigned int)_pid) + "-" + std::to_string(_shots) + ".bmp");
  }
};
