#hdr
#include "canvas.h"
#include "shader_unit.h"
#include "canvas/framebuffer_texture.h"
#end

class MotionBlurShader: public ShaderUnit
{
public:
  MotionBlurShader(Renderer &renderer)
    : ShaderUnit(renderer, "shaders/basic_vertex.glsl", "shaders/basic_fragment_blur.glsl", true)
  {
    relink();
  }

  virtual ~MotionBlurShader()
  {
  }
  
  virtual void bindData(ShaderProgram &shader)
  {
    shader.bind_data(FramebufferTexture::COLORS, "outColor");
    shader.bind_data(FramebufferTexture::VELOCITY, "outVelocity");
    shader.bind_data(FramebufferTexture::DEPTH, "outDepth");
    shader.bind_data(FramebufferTexture::BLOOM, "outBloom");
  }

  enum TextureUnits {
    COLOR = 0,
    DEPTH,
    VELOCITY,
    BLOOM,
    FRAGMENT
  };

  virtual void updateUniforms(ShaderProgram &shader)
  {
    // fragment shader inputs : texture units
    shader.setUniformi("tex", COLOR);
    shader.setUniformi("depth", DEPTH);
    shader.setUniformi("velocity", VELOCITY);
    shader.setUniformi("bloom", BLOOM);
    shader.setUniformi("fragment_data", FRAGMENT);
  }
};

class MotionBlur
{
  Canvas2D &_canvas;
  MotionBlurShader _shader;

public:
  MotionBlur(Canvas2D &canvas)
    : _canvas(canvas),
      _shader(canvas.renderer())
  {
  }

  void render(Texture &colors, Texture &depth, Texture &velocities, Texture &bloom)
  { 
    _canvas.bind(_shader);
    _canvas.clear();
    _canvas.pushModelViewMatrix(); {
      _canvas.setModelViewMatrix(Matrix::identity());
      _canvas.pushProjectionMatrix(); {
        _canvas.setProjectionMatrix(Matrix::orthographicProjection(-1.0, -1.0, 1.0, 1.0, 100.0, -100.0));
        colors.bind(MotionBlurShader::COLOR); // TODO remove or remove arg from renderSprite
        depth.bind(MotionBlurShader::DEPTH);
        velocities.bind(MotionBlurShader::VELOCITY);
        bloom.bind(MotionBlurShader::BLOOM);
        _canvas.setVelocity(Vec3());
        _canvas.setColor(Colors::White());
        _canvas.renderSprite(colors, Vec3(-1, -1, -100), Vec3(0, 0), Vec3(2.0, 2.0, 1.0), 0);
      } _canvas.popProjectionMatrix();
    } _canvas.popModelViewMatrix();
  }
};
