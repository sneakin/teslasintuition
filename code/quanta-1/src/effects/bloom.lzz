#hdr
#include "renderer.h"
#include "real.h"
#include "shader_unit.h"
//#include "effects/gaussian_blur.h"
//#include "effects/downsampler.h"
#include "effects/downsampling_blur.h"
#include "canvas/framebuffer_texture.h"
#end

class BloomShader: public ShaderUnit
{
  Renderer &_renderer;
  Canvas2D &_canvas;

public:
  BloomShader(Canvas2D &canvas)
    : ShaderUnit(canvas.renderer(), "shaders/basic_vertex.glsl", "shaders/bloom.glsl", true),
      _renderer(canvas.renderer()),
      _canvas(canvas)
  {
    relink();
  }

  virtual void bindData(ShaderProgram &shader)
  {
    shader.bind_data(FramebufferTexture::COLORS, "outColor");
  }

  virtual void updateUniforms(ShaderProgram &shader)
  {
    shader.setUniformi("inColors", 0);
    shader.setUniformi("inBloom", 1);
    shader.setUniformi("inBloomSamples", 2);
  }

  void setNumSamples(GLint num_samples)
  {
    setUniformi("inBloomNumSamples", num_samples);
  }

  void setBrightness(Real brightness)
  {
    setUniformr("inBloomBrightness", brightness);
  }
};

class Bloom
{
  Canvas2D &_canvas;
  BloomShader _shader;
  //GaussianBlur _blur;
  //DownSampler _downsampler;
  DownsamplingBlur _dblur;
  FramebufferTexture &_scratch_fb, &_scaled_fb;
  
public:
  Bloom(Canvas2D &canvas, int samples, int blur_size, FramebufferTexture &scratch_fb, FramebufferTexture &scaled_fb)
    : _canvas(canvas),
      _shader(canvas),
      //_blur(canvas, blur_size, scratch_fb),
      //_downsampler(canvas, samples),
      _dblur(canvas, samples, blur_size, scratch_fb),
      _scratch_fb(scratch_fb),
      _scaled_fb(scaled_fb)
  {
  }

  void render(GL3::Framebuffer &output, Texture &colors, Texture &bloom, float brightness = 1.0)
  {
    //_blur.render(_scaled_fb.framebuffer(), bloom);
    //_scratch_fb.bindFramebuffer();
    //_downsampler.render(_scaled_fb.colors());
    //output.bind();
    //renderBloom(colors, bloom, _scaled_fb.colors(), 1, brightness);
    //renderBloom(colors, bloom, _scaled_fb.colors(), _downsampler.numSamples(), brightness);
    
    //_scaled_fb.bindFramebuffer();
    //_downsampler.render(bloom);
    //_blur.render(_scaled_fb.framebuffer(), _scaled_fb.colors());
    _dblur.render(_scaled_fb, bloom);
    _canvas.bindFramebuffer(output);
    renderBloom(colors, bloom, _scaled_fb.colors(), _dblur.numSamples(), brightness);
  }

  void renderBloom(Texture &colors, Texture &bloom, Texture &downsamples, int num_samples, float brightness = 1.0)
  {
    _canvas.bind(_shader);
    _shader.setNumSamples(num_samples);
    _shader.setBrightness(brightness);

    _canvas.clear();
    _canvas.pushModelViewMatrix(); {
      _canvas.setModelViewMatrix(Matrix::identity());
      _canvas.pushProjectionMatrix(); {
        _canvas.setProjectionMatrix(Matrix::orthographicProjection(-1.0, -1.0, 1.0, 1.0, 100.0, -100.0));
        _canvas.setVelocity(Vec3());
        _canvas.setColor(Colors::White());
        bloom.bind(1);
        downsamples.bind(2);
        _canvas.renderSprite(colors, Vec3(-1, -1, -100), Vec3(0, 0), Vec3(2.0, 2.0, 1.0), 0);
      } _canvas.popProjectionMatrix();
    } _canvas.popModelViewMatrix();

    ASSERT_GL_ERROR;
  }
};
