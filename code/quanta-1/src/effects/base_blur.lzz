#hdr
#include "canvas.h"
#include "vertex_shader.h"
#include "fragment_shader.h"
#include "shader_program.h"
#end

class BaseBlur
{
  Renderer &_renderer;
  Canvas2D &_canvas;
  ShaderProgram _shader;
  VertexShader _vertex_shader;
  FragmentShader _fragment;
  int _size;
  float *_filter;

public:
  BaseBlur(Canvas2D &canvas, const char *blur_shader_path, int size)
    : _renderer(canvas.renderer()),
      _canvas(canvas),
      _shader(canvas.renderer()),
      _vertex_shader("shaders/basic_vertex.glsl"),
      _fragment(blur_shader_path),
      _size(0),
      _filter(NULL)
  {
    _shader.attach(_vertex_shader);
    _shader.attach(_fragment);
    _shader.bind_data(0, "outColor");
    _shader.relink();

    allocateFilter(size);
    computeFilter();
  }

  virtual ~BaseBlur()
  {
    delete[] _filter;
  }

  void allocateFilter(int size)
  {
    if(_filter) delete[] _filter;
    _filter = new float[size];
    _size = size;
  }

  void computeFilter()
  {
    float n = 1.0;
    int i;
    for(i = 0; i < _size / 2; i++) {
      _filter[i] = n;
      _filter[_size - i - 1] = n;
      n = n + n;
    }
    if(_size % 2 == 1) {
      _filter[i / 2 + 1] = n;
      n = n + n;
    }
    //n = n + n;
    for(int i = 0; i < _size; i++) {
      _filter[i] = _filter[i] / n;
      std::cerr << i << "\t" << _filter[i] << std::endl;
    }
  }
  
  void render(Texture &colors)
  {
    _canvas.bind(_shader);
    bindUniforms();

    _renderer.clear();
    _canvas.pushModelViewMatrix(); {
      _canvas.setModelViewMatrix(Matrix::identity());
      _canvas.pushProjectionMatrix(); {
        _canvas.setProjectionMatrix(Matrix::orthographicProjection(-1.0, -1.0, 1.0, 1.0, 100.0, -100.0));
        _canvas.setVelocity(Vec3());
        _canvas.setColor(Colors::White);
        _canvas.renderSprite(colors, Vec3(-1, -1, -100), Vec3(0, 0), Vec3(2.0, 2.0, 1.0), 0);
      } _canvas.popProjectionMatrix();
    } _canvas.popModelViewMatrix();

    ASSERT_GL_ERROR;
  }

  virtual void bindUniforms()
  {
    _shader.setUniformi("inColors", 0);
    _shader.setUniformi("inBlurSize", _size);
    _shader.setUniformfv("inBlurFilter", _size, _filter);
  }
};
