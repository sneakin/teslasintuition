#hdr
#include "renderer.h"
#include "geometry/icosahedron.h"
#include "geometry/icosahedron_renderer.h"
#include "quanta.h"
#end

#src
#include "gl.h"
#end

class QuantaRenderer
{
public:
  Icosahedron _icosa;
  IcosahedronRenderer _icosa_ren;
  Renderer &_renderer;

  static const Material QuantaMaterial = Material(Colors::White * 0.6, Colors::White, 32.0, Colors::White * 0.8);

  QuantaRenderer(Renderer &renderer)
    : _icosa(1.0), _icosa_ren(_icosa, renderer), _renderer(renderer)
  {
  }

  void render(const Camera &camera, const Quanta &quanta)
  {
    _renderer.unbindTexture();
    _renderer.bindMaterial(GL_FRONT_AND_BACK, QuantaMaterial);
    
    for(int i = 0; i < quanta.size(); i++) {
      Quantum q = quanta[i];
      _renderer.pushModelViewMatrix(); {
        _renderer.mulModelViewMatrix(Matrix::scale(Vec3(quanta.quantum_radius(), quanta.quantum_radius(), quanta.quantum_radius())) * Matrix::translation(q.position()));
        _renderer.setColor(q.color().abs() + Vec3::W);
        _icosa_ren.render(camera);
      } _renderer.popModelViewMatrix();
    }
  }

  void renderVelocities(const Camera &camera, const Quanta &quanta)
  {
    for(int i = 0; i < quanta.size(); i++) {
      Quantum q = quanta[i];
      _renderer.bindMaterial(GL_FRONT_AND_BACK, Renderer::AxisMaterial);
      _renderer.renderVector(q.position(), q.velocity() * _icosa.radius() * 10.0, q.color());
    }
  }
};
