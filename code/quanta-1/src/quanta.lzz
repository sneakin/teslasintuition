#hdr
#include <vector>
#include <set>
#include "quantum.h"
#end

#src
#include <iostream>

#define warn(condition) { \
  if(!(condition)) { std::cout << "Warning:" << __LINE__ << ": " << #condition << std::endl; } \
}

using std::isnan;
using std::isinf;
#end

class Quanta
{
  typedef std::vector<Quantum *> vector;
  vector _quanta;
  Real _quantum_radius;
  bool _swap_color;

public:
  Quanta(Real quantum_radius)
    : _quantum_radius(quantum_radius), _swap_color(false)
  {
  }

  virtual ~Quanta()
  {
    for(int i = 0; i < _quanta.size(); i++) {
      delete _quanta[i];
    }
  }

  void push_back(Quantum *q)
  {
    std::cerr << "Created new quantum" << q->position() << std::endl;
    _quanta.push_back(q);
  }

  Quantum &operator[] (int n)
  {
    return *_quanta[n];
  }

  const Quantum &operator[] (int n) const
  {
    return *_quanta[n];
  }

  int size() const { return _quanta.size(); }
  Real quantum_radius() const { return _quantum_radius; }

  bool swapColor() const {
    return _swap_color;
  }

  bool swapColor(bool yes) {
    return _swap_color = yes;
  }

  virtual void update(Real dt)
  {
    typedef std::pair<Real, int> collision_t;
    struct collision_compare: public std::less<collision_t>
    {
       bool operator() (const collision_t &a, const collision_t &b) {
         return a.first < b.first;
       }
    };
    typedef std::set<collision_t, collision_compare> seen_list_t;
    seen_list_t colliders;

    bool *seen = new bool[size()];
    for(int i = 0; i < size(); i++) {
      seen[i] = false;
    }

    // test for collisions
    for(int i = 0; i < size(); i++) {
      // find any colliders
      colliders.clear();

      for(int j = 0; j < size(); j++) {
        if(i != j && seen[i] != true && seen[j] != true) {
          Real t = collidesAt((*this)[i], (*this)[j], dt);
          if(!isnan(t)) {
            colliders.insert(collision_t(t, j));
          }
        }
      }

      // update position and velocity
      Real t_remaining = dt;

      if(colliders.size() > 0) {
        for(auto c: colliders) { // todo verify positioning and timing of 2nd and subsequent collision
          Real t = collidesAt((*this)[i], (*this)[c.second], t_remaining);
          if(!isnan(t)) {
            collide((*this)[i], (*this)[c.second], t, t_remaining);
            t_remaining -= t;
          }
          //seen[c.second] = true;
        }
      }

      (*this)[i].update(t_remaining);
      seen[i] = true;
    }

    delete[] seen;
  }

  Real collidesAt(const Quantum &a, const Quantum &b, Real dt)
  {
    Vec3 dp = (a.position() - b.position());
    Real dist = dp.magnitude();
    Vec3 dv = (a.velocity() - b.velocity());
    Real rel_speed = dv.magnitude();

    // quick escapes
    if((dp / dist).dot(dv / rel_speed) > 0.0 ||
       (dist - 2.0*_quantum_radius) > rel_speed) {
      //std::cerr << "No collision between " << a.position() << ":" << a.velocity() << " and " << b.position() << ":" << b.velocity() << "? " << (dp / dist).dot(dv / rel_speed) << "\t" << (a.position() - b.position()).magnitude() << std::endl;
      return NAN;
    }

    // Thanks Qalculate!
    // av^2 t^2 + 2*av*ax*t - 2*av*bv*t^2 - 2 * av*bx*t + ax^2 - 2*ax*bv*t - 2*ax*bx + bv^2 * t^2 + 2*bv *bx*t + bx^2
    // av^2 t^2 - 2*av*bv*t^2 + bv^2 * t^2 - 2 * av*bx*t - 2*ax*bv*t + 2*bv *bx*t + 2*av*ax*t + ax^2 + bx^2  - 2*ax*bx
    // t^2(av^2 - 2*av*bv + bv^2) + t(-2 * av*bx* - 2*ax*bv* + 2*bv *bx* + 2*av*ax) + (ax^2 + bx^2  - 2*ax*bx)

    Vec3 iv = a.position() * a.position() - 2.0 * a.position() * b.position() + b.position() * b.position();
    Vec3 jv = 2.0*a.position() * a.velocity() - 2.0 * a.position() * b.velocity() - 2.0 * b.position() * a.velocity() + 2.0 * b.position() * b.velocity();
    Vec3 kv = a.velocity() * a.velocity() - 2.0 * a.velocity() * b.velocity() + b.velocity() * b.velocity();

    // All that was for a distance squared formula, so add the components up.
    Real i = -4.0 * _quantum_radius * _quantum_radius + iv.x() + iv.y() + iv.z();
    Real j = jv.x() + jv.y() + jv.z();
    Real k = kv.x() + kv.y() + kv.z();

    // quadratic equation
    Real bac = j*j - 4.0*i*k;
    if(bac < 0.0) {
      return NAN;
    }

    Real tp = (-j + sqrt(bac)) / (2.0*k);
    Real tm = (-j - sqrt(bac)) / (2.0*k);

    // pick the t
    if((isnan(tp) || tp < 0.0 || tp > dt) && (isnan(tm) || tm < 0.0 || tm > dt)) {
      //std::cerr << "No collision between " << a.position() << ":" << a.velocity() << " and " << b.position() << ":" << b.velocity() << "? " << tp << " " << tm << minimum(tp, tm) << "\t" << (a.position() - b.position()).magnitude() << std::endl;
      return NAN;
    }

    //std::cerr << a.position() << ":" << a.velocity() << " and " << b.position() << ":" << b.velocity() << " " << "\t" << minimum(tp, tm) << "\t" << (a.position() - b.position()).magnitude() << std::endl;

    return minimum(tp, tm);
  }

  bool collide(Quantum &a, Quantum &b, Real t, Real dt)
  {
    Vec3 ac = a.position() + a.velocity() * t;
    Vec3 bc = b.position() + b.velocity() * t;

#ifdef BADMATH
    Vec3 n = ac - bc;
    Vec3 na = a.velocity().projectOnto(n);
    Vec3 nb = b.velocity().projectOnto(n);
    Vec3 va = (a.velocity() - na) + nb;
    Vec3 vb = (b.velocity() - nb) + na;
#else
    // courtesy of http://www.gamasutra.com/view/feature/131424/pool_hall_lessons_fast_accurate_.php
    Vec3 n = (ac - bc).normalize();
    Real aa = a.velocity().dot(n);
    Real ab = b.velocity().dot(n);
    Real p = (2.0 * (aa - ab)) / (a.mass() + b.mass());
    Vec3 va = a.velocity() - p * b.mass() * n;
    Vec3 vb = b.velocity() + p * a.mass() * n;
#endif

    if(va.isNaN() || vb.isNaN()) return false;

    warn(((a.mass()*a.velocity() + b.mass()*b.velocity()) - (a.mass()*va + b.mass()*vb)).magnitude() <= 0.01);

    a.setVelocity(va);
    a.setPosition(ac);
    b.setVelocity(vb);
    b.setPosition(bc);

    /*
    Vec3 ca = b.color().reflectBy(n).normalize();
    Vec3 cb = a.color().reflectBy(n).normalize();
    a.setColor(ca);
    b.setColor(cb);
    */

    if(_swap_color) {
      Vec3 c = a.color();
      a.setColor(b.color());
      b.setColor(c);
    }

    return true;
  }
};
