#hdr
#include <string>
#include "gl.h"
#include "renderer.h"
#include "shader.h"
#end

class ShaderProgram;

class ShaderProgramLinkError
{
  ShaderProgram &_program;
  std::string _msg;

public:
  ShaderProgramLinkError(ShaderProgram &p, const std::string &msg)
    : _program(p), _msg(msg)
  {
  }
};

class ShaderProgram
{
  Renderer &_renderer;
  GLuint _id;

public:
  ShaderProgram(Renderer &r)
    : _renderer(r)
  {
    _id = glCreateProgram();
    ASSERT_GL_ERROR;
  }

  ~ShaderProgram()
  {
    glDeleteProgram(_id);
  }

  GLuint id() const { return _id; }

  void attach(Shader &shader)
  {
    glAttachShader(_id, shader.id());
  }

  void relink()
  {
    glLinkProgram(_id);
    GLint ok = GL_TRUE;
    glGetProgramiv(_id, GL_LINK_STATUS, &ok);
    if(ok != GL_TRUE) {
      GLchar msg[1024];
      glGetProgramInfoLog(_id, 1024, NULL, msg);
      throw ShaderProgramLinkError(*this, msg);
    }
  }

  void bind()
  {
    _renderer.useProgram(_id);
  }

  void bind_data(GLuint location, const char *name)
  {
    glBindFragDataLocation(_id, location, name);
    ASSERT_GL_ERROR;
  }

  void setUniformi(const char *uniform, GLuint value)
  {
    glUniform1i(uniformLocation(uniform), value);
    ASSERT_GL_ERROR;
  }

  void setUniformr(const char *uniform, Real value)
  {
    glUniform1r(uniformLocation(uniform), value);
    ASSERT_GL_ERROR;
  }

  void setUniformfv(const char *uniform, GLuint count, const GLfloat values[])
  {
    GLuint loc = uniformLocation(uniform);
    glUniform1fv(loc, count, values);
    ASSERT_GL_ERROR;
  }

  GLuint uniformLocation(const char *uniform)
  {
    return glGetUniformLocation(_id, uniform);
  }
};
