#hdr
#include "vec3.h"
#end

#src
using std::isnan;
using std::isinf;
#end

class Colors
{
public:
#define COLOR(name, r, g, b, a) static const Vec3 &name() { static Vec3 c(r, g, b, a); return c; }
  COLOR(Clear, 1, 1, 1, 0);
  COLOR(Opaque, 1, 1, 1, 1);
#undef COLOR
#define COLOR(name, r, g, b) static const Vec3 &name() { static Vec3 c(r, g, b, 1.0); return c; }
  COLOR(White, 1, 1, 1);
  COLOR(Gray, 0.5, 0.5, 0.5);
  COLOR(Black, 0, 0, 0);
  COLOR(Red, 1, 0, 0);
  COLOR(Green, 0, 1, 0);
  COLOR(Blue, 0, 0, 1);
  COLOR(Yellow, 1, 1, 0);
  COLOR(Cyan, 0, 1, 1);
  COLOR(Magenta, 1, 0, 1);
#undef COLOR
  
  static const int NumColors = 6;

  static const Vec3 &color(int n)
  {
    static const Vec3 palette[NumColors] = { Red(), Yellow(), Green(), Cyan(), Blue(), Magenta() };
    return palette[abs(n) % NumColors];
  }

  static const Vec3 &color()
  {
    return color(rand());
  }

  static Vec3 color(Real n)
  {
    if(isinf(n)) {
      return White();
    } else if(isnan(n)) {
      return Black();
    } else {
      Vec3 a = color((int)floorr(n)), b = color((int)ceilr(n));
      Real i, t = modfr(n, &i);
      return a * ((Real)1.0 - t) + b * t;
    }
  }
}
