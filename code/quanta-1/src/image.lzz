#hdr
#include <string>
#include <SDL2/SDL.h>
#include "argument_error.h"
#end

class Image
{
  std::string _path;
  SDL_Surface *_surface;
  
public:
  Image(const std::string &path)
    : _path(path), _surface(NULL)
  {
    if(!load()) {
      throw ArgumentError(path + " not found");
    }
  }
  
  Image(int width, int height, int bpp)
    : _path(""), _surface(NULL)
  {
    _surface = SDL_CreateRGBSurface(0, width, height, bpp*8, 0xFF, 0xFF00, 0xFF0000, 0);
    if(_surface == NULL) {
      throw ArgumentError("unable to allocate Image");
    }
  }
  
  ~Image()
  {
    unload();
  }

  const std::string &path() const { return _path; }

  bool loaded() const { return _surface != NULL; }
  
  void unload()
  {
    if(_surface) {
      SDL_FreeSurface(_surface);
      _surface = NULL;
    }
  }

  bool load()
  {
    SDL_Surface *bmp = SDL_LoadBMP(_path.c_str());
    if(bmp != NULL) {
      unload();
      _surface = bmp;
      return true;
    } else {
      return false;
    }
  }

  SDL_Surface *surface() const { return _surface; }

  int width() const { return _surface->w; }
  int height() const { return _surface->h; }
};

