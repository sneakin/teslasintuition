#hdr
#include "renderer.h"
#include "geometry/icosahedron.h"
#include "vertex_array.h"
#include "array_buffer.h"
#include "index_buffer.h"
#end

#src
#include "gl.h"
#include "real.h"
#end

class IcosahedronRenderer
{
  const Icosahedron &_icosa;
  Renderer &_renderer;
  ArrayBuffer<Vec3> _verts;
  IndexBuffer<Icosahedron::Face> _faces;
  VertexArray _vert_buffer;

public:
  IcosahedronRenderer(const Icosahedron &icosa, Renderer &r)
    : _icosa(icosa), _renderer(r), _verts(r), _faces(r), _vert_buffer(r)
  {
    setupBuffers();
  }

  void setupBuffers()
  {
    _vert_buffer.bind();
    _verts.update(_icosa.vertices(), Icosahedron::NumPoints);
    _vert_buffer.enableAttribute(0, 4, GL_REAL, GL_FALSE, 0, 0);
    _vert_buffer.enableAttribute(2, 4, GL_REAL, GL_FALSE, 0, 0);
    _vert_buffer.unbind();

    _faces.update(_icosa.faces(), Icosahedron::NumFaces);
    _faces.unbind();
  }

  void render(const Camera &cam)
  {
    _vert_buffer.bind();
    //glPointSize(5.0);
    //glDrawArrays(GL_POINTS, 0, Icosahedron::NumPoints);

    _faces.bind();
    glDrawElements(GL_TRIANGLES, 3 * Icosahedron::NumFaces, GL_UNSIGNED_INT, 0);
    _faces.unbind();

    _vert_buffer.unbind();

    ASSERT_GL_ERROR;
  }
};
