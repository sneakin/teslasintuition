#hdr
#include <iostream>
#include "real.h"
#include "math-fun.h"

#ifdef SLOW_VECTOR
  typedef Real RealArray_4[4];
#else
  typedef Real RealArray_4 __attribute__((vector_size(sizeof(Real) * 4)));
  typedef Integer BoolArray_4 __attribute__((vector_size(sizeof(Integer) * 4)));
#endif
#end

#src
#include <stdlib.h>

using std::isnan;
#end

class Vec3
{
public:

private:
  RealArray_4 _v;
  
public:
  static const Vec3 X = Vec3(1, 0, 0), Y = Vec3(0, 1, 0), Z = Vec3(0, 0, 1), W = Vec3(0, 0, 0, 1), Origin = Vec3(0, 0, 0, 0);
  static const Vec3 nX = Vec3(-1, 0, 0), nY = Vec3(0, -1, 0), nZ = Vec3(0, 0, -1), nW = Vec3(0, 0, 0, -1);

  Vec3(const RealArray_4 other)
  {
#ifdef SLOW_VECTOR
    for(int i = 0; i < 4; i++) {
      _v[i] = other[i];
    }
#else
    _v = other;
#endif
  }
  
  Vec3(Real x = 0.0f, Real y = 0.0f, Real z = 0.0f, Real w = 1.0f)
  {
    _v[0] = x;
    _v[1] = y;
    _v[2] = z;
    _v[3] = w;
  }
  Vec3(const Vec3 &other)
  {
    std::cerr << "Vec3::Vec3(" << other << ")" << std::endl;
    set(other);
  }

  Real x() const { return _v[0]; }
  void setX(Real n) { _v[0] = n; }
  Real y() const { return _v[1]; }
  void setY(Real n) { _v[1] = n; }
  Real z() const { return _v[2]; }
  void setZ(Real n) { _v[2] = n; }
  Real w() const { return _v[3]; }
  void setW(Real n) { _v[3] = n; }

#ifdef SLOW_VECTOR
#define SCALAR_OP(OP) \
  template<typename T> \
  Vec3 operator OP (const T &n) const \
  { \
    return Vec3(_v[0] OP n, _v[1] OP n, _v[2] OP n, _v[3] OP n); \
  }
#else
#define SCALAR_OP(OP) \
  template<typename T> \
  Vec3 operator OP (const T &n) const \
  { \
    return Vec3(_v OP (Real)n);                 \
  }
#endif

  SCALAR_OP(+)
  SCALAR_OP(-)
  SCALAR_OP(*)
  SCALAR_OP(/)

  Vec3 &operator += (const Vec3 &other)
  {
#ifdef SLOW_VECTOR
    for(int i = 0; i < 4; i++) _v[i] += other._v[i];
#else
    _v = _v + other._v;
#endif
    return *this;
  }

  Vec3 &operator -= (const Vec3 &other)
  {
#ifdef SLOW_VECTOR
    for(int i = 0; i < 4; i++) _v[i] -= other._v[i];
#else
    _v = _v - other._v;
#endif
    return *this;
  }

  Vec3 operator - () const
  {
    return *this * -1.0f;
  }

#undef SCALAR_OP

  Vec3 operator % (Real n) const
  {
    return Vec3(fmodr(x(), n), fmodr(y(), n), fmodr(z(), n), fmodr(w(), n));
  }

#ifdef SLOW_VECTOR
#define VECTOR_OP(OP) \
  Vec3 operator OP (const Vec3 &other) const \
  { \
    return Vec3(_v[0] OP other._v[0], _v[1] OP other._v[1], _v[2] OP other._v[2], _v[3] OP other._v[3]); \
  }
#else
#define VECTOR_OP(OP) \
  Vec3 operator OP (const Vec3 &other) const \
  { \
    return Vec3(_v OP other._v); \
  }
#endif

  VECTOR_OP(+)
  VECTOR_OP(-)
  VECTOR_OP(*)

#undef VECTOR_OP

  bool operator == (const Vec3 &other) const
  {
    //return (*this - other).magnitude() < 0.001;
    // return fabs(x() - other.x()) < 0.001 &&
    //   fabs(y() - other.y()) < 0.001 &&
    //   fabs(z() - other.z()) < 0.001 &&
    //   fabs(w() - other.w()) < 0.001;
#ifdef SLOW_VECTOR
    return x()==other.x() && y() == other.y() && z() == other.z(); // && w() == other.w();
#else
    BoolArray_4 a = _v == other._v;
    return a[0] && a[1] && a[2];
#endif
  }

  bool operator != (const Vec3 &other) const
  {
#ifdef SLOW_VECTOR
    return x()!=other.x() || y() != other.y() || z() != other.z(); // || w() != other.w();
#else
    BoolArray_4 a = _v != other._v;
    return a[0] || a[1] || a[2];
#endif
  }

  Vec3 cross(const Vec3 &other) const
  {
#ifdef SLOW_VECTOR
    return Vec3(_v[1] * other._v[2] - _v[2] * other._v[1],
                _v[2] * other._v[0] - _v[0] * other._v[2],
                _v[0] * other._v[1] - _v[1] * other._v[0]);
#else
    RealArray_4 a = { _v[1], _v[2], _v[0] };
    RealArray_4 b = { other._v[2], other._v[0], other._v[1] };
    RealArray_4 c = { _v[2], _v[0], _v[1] };
    RealArray_4 d = { other._v[1], other._v[2], other._v[0] };
    return Vec3(a * b - c * d);
#endif
  }

  Real dot(const Vec3 &other) const
  {
#ifdef SLOW_VECTOR
    return x()*other.x() + y()*other.y() + z()*other.z();
#else
    RealArray_4 a = _v * other._v;
    return a[0] + a[1] + a[2];
#endif
  }

  Vec3 normalize() const
  {
    return *this / magnitude() * Vec3(1.0, 1.0, 1.0, 0.0);;
  }

  Real magnitude() const
  {
    return sqrt(magnitude_squared());
  }

  Real magnitude_squared() const
  {
#ifdef SLOW_VECTOR
    return (_v[0] * _v[0] + _v[1] * _v[1] + _v[2] * _v[2]);
#else
    RealArray_4 a = _v * _v;
    return a[0] + a[1] + a[2];
#endif
  }

  Real scalarProjection(const Vec3 &v) const
  {
    return dot(v.normalize());
  }

  Vec3 projectOnto(const Vec3 &v) const
  {
    return v.normalize() * scalarProjection(v);
  }

  Vec3 rejection(const Vec3 &v) const
  {
    return *this - projectOnto(v);
  }

  Vec3 reflectBy(const Vec3 &normal) const
  {
    return -2.0f * projectOnto(normal) + *this;
  }

  Vec3 negate() const
  {
    return -(*this);
  }

  bool isNaN() const {
    for(int i = 0; i < 4; i++) {
      if(isnan(_v[i])) return true;
    }
    return false;
  }

  const Real *get() const { return (Real *)&_v; }

  void set(const Vec3 &other)
  {
    std::cerr << *this << "::set(" << other << ")" << std::endl;
#ifdef SLOW_VECTOR
    for(int i = 0; i < 4; i++) {
      _v[i] = other._v[i];
    }
#else
    _v = other._v;
#endif
  }

  operator const Real * () const
  {
    return get();
  }

  Vec3 clamp(Real min = 0.0f, Real max = 1.0f) const
  {
    return Vec3(::clamp(x(), max, min),
                ::clamp(y(), max, min),
                ::clamp(z(), max, min),
                ::clamp(w(), max, min));
  }

  Vec3 clamp(const Vec3 &min, const Vec3 &max) const
  {
    return Vec3(::clamp(x(), max.x(), min.x()),
                ::clamp(y(), max.y(), min.y()),
                ::clamp(z(), max.z(), min.z()),
                ::clamp(w(), max.w(), min.w()));
  }

  Vec3 abs() const
  {
    return Vec3(fabs(x()), fabs(y()), fabs(z()), fabs(w()));
  }

  static Real randf()
  {
    return (rand() & 0xFFFFFF) / (Real)0xFFFFFF;
  }

  static Vec3 random(const Vec3 &min, const Vec3 &max)
  {
    Vec3 delta = max - min;
    Vec3 offset = delta / 2.0f;
    return Vec3(delta.x() != 0.0f ? randf() * delta.x() : 0.0f,
                delta.y() != 0.0f ? randf() * delta.y() : 0.0f,
                delta.z() != 0.0f ? randf() * delta.z() : 0.0f,
                delta.w() != 0.0f ? randf() * delta.w() : 0.0f) - offset;
  }

  static Vec3 random()
  {
    return random(Vec3(-1024.0, -1024.0, -1024.0),
                  Vec3(1024.0, 1024.0, 1024.0)).normalize();
  }

  Vec3 floor() const
  {
    return Vec3(floorr(x()), floorr(y()), floorr(z()), floorr(w()));
  }
};

Vec3 operator* (int a, const Vec3 &v)
{
  return v * a;
}

Vec3 operator* (float a, const Vec3 &v)
{
  return v * (Real)a;
}

Vec3 operator* (double a, const Vec3 &v)
{
  return v * (Real)a;
}

std::ostream &operator<<(std::ostream &s, const Vec3 &v)
{
  s << "<Vec3: " << v.x() << ", " << v.y() << ", " << v.z() << ", " << v.w() << ">";
  return s;
}

