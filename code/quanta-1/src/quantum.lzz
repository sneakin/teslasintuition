#hdr
#include "vec3.h"
#include "colors.h"
#end

class Quantum
{
  Vec3 _position, _velocity, _color;
  Real _scale, _mass;

public:
  Quantum(const Vec3 &position, const Vec3 &velocity, Real scale = 100, const Vec3 &color = Colors::White, Real mass = 1.0)
    : _position(position), _velocity(velocity), _color(color), _scale(scale), _mass(mass)
  {
  }

  const Vec3 &position() const { return _position; }
  Quantum &setPosition(const Vec3 &v) { _position = v; return *this; }
  const Vec3 &velocity() const { return _velocity; }
  Quantum &setVelocity(const Vec3 &v) { _velocity = v; return *this; }
  const Vec3 &color() const { return _color; }
  Quantum &setColor(const Vec3 &c) { _color = c; return *this; }
  Real mass() const { return _mass; }
  Quantum &setMass(Real m) { _mass = m; return *this; }

  Real universeSize() const { return _scale; }

  virtual void update(Real dt)
  {
    Vec3 r = (_position + _velocity * dt);

#if defined(WRAPAROUND_CUBE)
    if(r.x() > _scale) {
      r.setX(-_scale);
    } else if(r.x() < -_scale) {
      r.setX(_scale);
    }

    if(r.y() > _scale) {
      r.setY(-_scale);
    } else if(r.y() < -_scale) {
      r.setY(_scale);
    }

    if(r.z() > _scale) {
      r.setZ(-_scale);
    } else if(r.z() < -_scale) {
      r.setZ(_scale);
    }
#elif defined(WRAPAROUND_SPHERE)
    if(r.magnitude() >= _scale) {
      r = r.normalize() * -_scale;
    }
#endif

    _position = r;
  }
};
